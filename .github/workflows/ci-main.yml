name: CD - Dev to Main

on:
  push:
    branches:
      - main

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run backend tests
        working-directory: ./backend
        run: npm test

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test


      - name: Set DOCKER_USERNAME environment variable
        run: echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV


      - name: Install e2e dependencies
        working-directory: ./e2e-tests
        run: npm install

      - name: Start Application with Docker Compose
        working-directory: ./
        run: |
          docker compose up -d
          echo "Waiting for application to start..."
          sleep 30

      - name: Check if application is running
        run: |
          curl -v http://localhost:3000 || exit 1

      - name: Run E2E tests
        working-directory: ./e2e-tests
        env:
          NODE_ENV: test
        run: |
          # Installer ChromeDriver et lancer les tests Selenium
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget -q https://chromedriver.storage.googleapis.com/$(curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE)/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          export PATH=$PATH:/usr/local/bin/
          npm run test # Lancer les tests E2E avec Selenium

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set DOCKER_USERNAME environment variable
        run: echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV

      - name: Build Docker images using docker-compose
        run: |
          docker compose build

      - name: Push Docker images to Docker Hub
        run: |
          docker compose push